<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->

<!--
NOTE: This file is generated by helm-docs: https://github.com/norwoodj/helm-docs#installation
-->

{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.versionBadge" . }}

{{ template "chart.description" . }}

This chart is a wrapper (or a meta chart) above the original official [superset chart](https://github.com/apache/superset/tree/superset-helm-chart-{{ regexReplaceAll "-.*" .Version "" }}/helm/superset) and references it as a subchart dependency to provide overrides and enrichment for the existing default values.

Objectively, the chart provides the following features:

1. An implementation for a custom Oauth2/OpenId providers which includes [keycloak](https://www.keycloak.org/) and [Dex IdP](https://dexidp.io/).
2. Externalizes the secrets into a specific okdp secrets for the database, Oauth2, redis and superset related credentials.
3. Provides high level configuration for superset deployment by overriding the default superset original values.
4. Provides an ability to add additional future components (like monitoring) or replace existing ones (like original subcharts for redis and postgresql database).
5. Seamless configuration and deployment.

## TL;DR

```console
$ helm install my-release oci://quay.io/okdp/charts/superset --version {{ template "chart.version" . }}
```

{{ template "chart.requirementsSection" . }}

## Installing the Chart

Make sure you set your own `okdp.superset.superset_secret_key` to something unique and secret. This secret key is used by Flask for
securely signing the session cookie and will be used to encrypt sensitive data on Superset's metadata database.

Use can use the [following command](https://superset.apache.org/docs/configuration/configuring-superset/#adding-an-initial-secret_key) to generate a strong secure key:

 ```console
$ openssl rand -base64 42
```

To install the chart with the release name `my-release`:

```console
$ helm upgrade --cleanup-on-fail --install my-release oci://quay.io/okdp/charts/superset \
      --version {{ template "chart.version" . }} \
      --set okdp.superset.superset_secret_key=$(openssl rand -base64 42)
```

## Customizing the values

The chart provides two main sections:
1. `okdp` section: Provides a high lavel configuration for superset cluster (Oauth2 authentication, roles mapping, superset configuration, etc.)
2. `superset` section: contains the orignal [superset chart](https://github.com/apache/superset/tree/superset-helm-chart-{{ regexReplaceAll "-.*" .Version "" }}/helm/superset) values.
   These values can be customized as well. You can also check the values directly in the reference [superset chart](https://github.com/apache/superset/tree/superset-helm-chart-{{ regexReplaceAll "-.*" .Version "" }}/helm/superset).

You can ccustomize the sample [values file](./sample-values.yaml) with your own Oauth2/OpenId provider, Oauth groups mappings, ingress endpoint and deploy the chart like the following:

```console
$ helm upgrade --cleanup-on-fail --install my-release oci://quay.io/okdp/charts/superset \
      --version {{ template "chart.version" . }} \
      --values sample-values.yaml
```

{{ define "chart.valueDefaultColumnRender" }}
{{- $defaultValue := (default .Default .AutoDefault)  -}}
{{- $notationType := .NotationType }}
{{- if (and (hasPrefix "`" $defaultValue) (hasSuffix "`" $defaultValue) ) -}}
{{- $defaultValue = (toPrettyJson (fromJson (trimAll "`" (default .Default .AutoDefault) ) ) ) -}}
{{- $notationType = "json" }}
{{- end -}}
{{- if (eq $notationType "tpl" ) }}
<pre lang="{{ $notationType }}">
{{ .Key }}: |
{{- $defaultValue | nindent 2 }}
</pre>
{{- else if (eq $notationType "email") }}
<a href="mailto:{{ $defaultValue }}" style="color: green;">"{{ $defaultValue }}"</a>
{{- else }}
<pre lang="{{ $notationType }}">
{{ $defaultValue }}
</pre>
{{- end }}
{{ end }}

{{ define "chart.typeColumnRender" }}
{{- if (eq .Type "string/email") }}
<a href="#stringemail" title="{{- template "chart.valuetypes.email" -}}">{{.Type}}</a>
{{- else if (eq .Type "k8s/storage/persistent-volume/access-modes" )}}
<a target="_blank" 
   href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes"
   >{{- .Type }}</a>
{{- else }}
{{ .Type }}
{{- end }}
{{ end }}

{{ define "chart.valuesTableHtml" }}
<table height="100%" >
	<thead>
		<th>Key</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</thead>
	<tbody>
	{{- range .Values }}
		<tr>
			<td id="{{ .Key | replace "." "--" }}"><a href="./values.yaml#L{{ .LineNumber }}">{{ .Key }}</a></td>
			<td>{{- template "chart.typeColumnRender" . -}}</td>
			<td>
        {{- $defaultValue := .AutoDefault  -}}
        {{- if (hasSuffix "`" $defaultValue) -}}
				<div style="max-width: 300px;">
          <a href="./values.yaml#L{{ .LineNumber }}">see default</a>
        </div>
        {{- else -}}
        <div style="max-width: 300px;">{{ template "chart.valueDefaultColumnRender" . }}</div>
        {{- end -}}
			</td>
			<td>{{ if .Description }}{{ .Description }}{{ else }}{{ .AutoDescription }}{{ end }}</td>
		</tr>
	{{- end }}
	</tbody>
</table>
{{ end }}

{{ template "chart.valuesSectionHtml" . }}

{{ template "chart.sourcesSection" . }}